(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{1332:function(s,a,e){"use strict";e.r(a);var n=e(7),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"微服务架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构"}},[s._v("#")]),s._v(" 微服务架构")]),s._v(" "),a("p",[s._v("目前企业的流行技术还是以SpringCloud   alibaba 为主(nacos  sentinal  seta  )")]),s._v(" "),a("p",[s._v("低代码开发平台，项目型企业的原则：效率优先  ( Mybatisx   mybatisplus    )")]),s._v(" "),a("p",[s._v("前端vue/springboot")]),s._v(" "),a("p",[s._v("jeecgboot")]),s._v(" "),a("p",[s._v("任务调度：xxljob\nElastic-Job")]),s._v(" "),a("h2",{attrs:{id:"一-微服务架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-微服务架构"}},[s._v("#")]),s._v(" 一：微服务架构")]),s._v(" "),a("h3",{attrs:{id:"_1-0-单体架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-0-单体架构"}},[s._v("#")]),s._v(" 1.0：单体架构")]),s._v(" "),a("blockquote",[a("p",[s._v("将项目所有模块（功能）打成jar或者war，然后部署一个进程")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(894),alt:"v2-1b379f20419869e262997606ea5fd4ed_720w"}})]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("优点：\n1：部署简单: 由于是完整的结构体，可以直接部署在一个服务器上即可。\n2：技术单一: 项目不需要复杂的技术栈，往往一套熟悉的技术栈就可以完成开发。\n3：用人成本低: 单个程序员可以完成业务接口到数据库的整个流程。\n\n缺点：\n1：系统启动慢， 一个进程包含了所有的业务逻辑，涉及到的启动模块过多，导致系统的启动、重启时间周期过长;\n2：系统错误隔离性差、可用性差，任何一个模块的错误均可能造成整个系统的宕机;\n3：可伸缩性差：系统的扩容只能只对这个应用进行扩容，无法结合业务模块的特点进行伸缩。\n4：线上问题修复周期长：任何一个线上问题修复需要对整个应用系统进行全面升级。\n5. 跨语言程度差\n6. 不利于安全管理，所有开发人员都拥有全量代码   代码管理工具: git svn \n                                          码云  github   华为云Devcloud\n\n运营平台，传统项目，访问量不大  采用单体架构\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"_1-1-微服务架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-微服务架构"}},[s._v("#")]),s._v(" 1.1：微服务架构")]),s._v(" "),a("p",[s._v("微服务架构论文：https://martinfowler.com/articles/microservices.html")]),s._v(" "),a("p",[s._v("译文：https://mp.weixin.qq.com/s?__biz=MjM5MjEwNTEzOQ==&mid=401500724&idx=1&sn=4e42fa2ffcd5732ae044fe6a387a1cc3#rd")]),s._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-txt"}},[a("code",[s._v("In short, the microservice architectural style [1] is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms（ 美 ['mekə,nɪzəm]  机制）, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\n简而言之，微服务架构风格[1]这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统的。其中每个小型服务都运行在自己的进程中，并经常采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务我们仅做最低限度的集中管理。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("解读微服务特点:")]),a("br"),s._v(" "),a("strong",[s._v("注册中心 : eureka     nacos     zoomkper(大数据技术)    了解  面试")])]),s._v(" "),a("p",[s._v("1:微服务是一种项目架构思想(风格)       SpringCloud   netflix（eureka） /alibaba(nacos)    (dubbo +zoomkper )")]),s._v(" "),a("p",[s._v("2微服务架构是一系列小服务的组合（组件化与多服务） 【maven多模块项目】")]),s._v(" "),a("p",[s._v("3:任何一个微服务，都是一个独立的进程（独立开发、独立维护、独立部署）")]),s._v(" "),a("p",[s._v("4:轻量级通信http协议(跨语言,跨平台)  --   通信      http进行数据传输")]),s._v(" "),a("p",[s._v("5:服务粒度(围绕业务功能拆分)")]),s._v(" "),a("p",[s._v("6:去中心化管理(去中心化”地治理技术、去中心化地管理数据)   --eureka / nacos")]),s._v(" "),a("h3",{attrs:{id:"_1-2-微服务架构的优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-微服务架构的优势"}},[s._v("#")]),s._v(" 1.2：微服务架构的优势")]),s._v(" "),a("p",[a("strong",[s._v("1.易于开发和维护")]),s._v("\n一个微服务只关注一个特定的业务功能，所以它的业务清晰、代码量较少。开发和维护单个微服务相对比较简单，整个应用是由若干个微服务构建而成，所以整个应用也会维持在可控状态；")]),s._v(" "),a("p",[a("strong",[s._v("2.单个微服务启动较快")]),s._v("\n单个微服务代码量较少，所以启动会比较快；")]),s._v(" "),a("p",[a("strong",[s._v("3.局部修改容易部署")]),s._v("\n单体应用只要有修改，就要重新部署整个应用，微服务解决了这样的问题。一般来说，对某个微服务进行修改，只需要重新部署这个服务即可；")]),s._v(" "),a("p",[a("strong",[s._v("4.技术栈不受限")]),s._v("\n在微服务中，我们可以结合项目业务及团队的特点，合理地选择技术栈")]),s._v(" "),a("p",[a("strong",[s._v("5.按需伸缩")])]),s._v(" "),a("p",[s._v("java     go")]),s._v(" "),a("p",[s._v("jvm")])])}),[],!1,null,null,null);a.default=t.exports},894:function(s,a,e){s.exports=e.p+"assets/img/v2-1b379f20419869e262997606ea5fd4ed_720w.1b379f20.png"}}]);