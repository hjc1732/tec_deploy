(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{1382:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1、juc概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、juc概述"}},[t._v("#")]),t._v(" 1、JUC概述")]),t._v(" "),a("h2",{attrs:{id:"_1、juc是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、juc是什么"}},[t._v("#")]),t._v(" 1、JUC是什么")]),t._v(" "),a("p",[a("strong",[t._v("java.util.concurrent")]),t._v("在并发编程中使用的工具包，自jdk1.5开始出现该工具包")]),t._v(" "),a("h2",{attrs:{id:"_2、线程和进程的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程和进程的概念"}},[t._v("#")]),t._v(" 2、线程和进程的概念")]),t._v(" "),a("h3",{attrs:{id:"_1、进程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程是什么"}},[t._v("#")]),t._v(" 1、进程是什么")]),t._v(" "),a("p",[t._v("进程是系统进行资源分配和调度的基本单位，是操作系统结构的基础（即打开软件所占用的空间）")]),t._v(" "),a("h3",{attrs:{id:"_2、线程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程是什么"}},[t._v("#")]),t._v(" 2、线程是什么")]),t._v(" "),a("p",[t._v("线程是操作系统能够进行运算调度的最小单位，他被包含在进程中。（进程之内独立执行的一个单元执行流），是程序执行的最小单元")]),t._v(" "),a("h3",{attrs:{id:"_3、线程的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、线程的状态"}},[t._v("#")]),t._v(" 3、线程的状态")]),t._v(" "),a("h4",{attrs:{id:"_1、-线程状态中的枚举类-thread-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、-线程状态中的枚举类-thread-state"}},[t._v("#")]),t._v(" 1、* 线程状态中的枚举类   Thread.State")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("State")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NEW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新建")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RUNNABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//准备就绪")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BLOCKED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//阻塞")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WAITING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不见不散,等待,持续等待")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TIMED_WAITING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//过时不候,等待")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TERMINATED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//终结（terminated）")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h4",{attrs:{id:"_2、-wait-sleep方法的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、-wait-sleep方法的区别"}},[t._v("#")]),t._v(" 2、* wait/sleep方法的区别")]),t._v(" "),a("p",[t._v("1、sleep方法是Thread类中的方法，wait是Object类中的方法")]),t._v(" "),a("p",[t._v("2、sleep不会释放锁，wait会释放锁，但调用它的前提是当前线程占有锁，即代码在synchronied中")]),t._v(" "),a("p",[t._v("3、它们都可以被interrupted方法中断")]),t._v(" "),a("h3",{attrs:{id:"_4、并发和并行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、并发和并行"}},[t._v("#")]),t._v(" 4、并发和并行")]),t._v(" "),a("p",[t._v("并发：同一时刻多个线程在访问同一个子隐患，多线程对一个点，例如：春运抢票，电商秒杀")]),t._v(" "),a("p",[t._v("并行：多项工作一起执行，之后在汇总，例如：泡方便面，水壶烧水，一边撕调料倒入桶中")]),t._v(" "),a("h3",{attrs:{id:"_5、管程对象-monitor-锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、管程对象-monitor-锁"}},[t._v("#")]),t._v(" 5、管程对象（Monitor）/ 锁")]),t._v(" "),a("p",[t._v("操作系统中叫监视器，java中叫做锁，是一种同步机制，保证同一时间，只有一个线程访问被保护的数据或代码")]),t._v(" "),a("p",[t._v("java同步基于进入和退出，使用管程对象实现，即程序执行时创建一个锁（管程对象），程序执行结束，释放该管程对象")]),t._v(" "),a("h3",{attrs:{id:"_6、用户线程和守护线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、用户线程和守护线程"}},[t._v("#")]),t._v(" 6、用户线程和守护线程")]),t._v(" "),a("p",[t._v("用户线程:   平时自定义的thread都是用户线程")]),t._v(" "),a("p",[t._v("守护线程:   例如垃圾回收在后台默默执行的线程是守护线程")]),t._v(" "),a("p",[t._v("区别： 如果用户线程执行没有结束，则jvm不会停止（jvm存活），如果守护线程执行没有结果，但是用户线程结束了，jvm停止")])])}),[],!1,null,null,null);a.default=e.exports}}]);