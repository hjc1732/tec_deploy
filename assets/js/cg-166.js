(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{1420:function(n,s,a){"use strict";a.r(s);var e=a(7),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[n._v("#")]),n._v(" 枚举")]),n._v(" "),s("p",[s("strong",[n._v("枚举也是一种引用数据类型")])]),n._v(" "),s("p",[n._v("Java枚举详解")]),n._v(" "),s("h2",{attrs:{id:"一-基本介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-基本介绍"}},[n._v("#")]),n._v(" 一.基本介绍")]),n._v(" "),s("p",[n._v("枚举对应英文(enumeration,简写 enum)")]),n._v(" "),s("p",[n._v("枚举是一组常量的集合")]),n._v(" "),s("p",[n._v("枚举属于一种特殊的类，里面只包含一组有限的特定的对象  （不能自定义对象，私有的构造方法）")]),n._v(" "),s("p",[n._v("不需要提供 setXxxx() 方法，因为"),s("strong",[n._v("枚举对象值通常为只读")])]),n._v(" "),s("p",[s("strong",[n._v("对枚举对象/属性使用 static+final 共同修饰")])]),n._v(" "),s("p",[n._v("static+final只有修饰基本数据类型、String类型才不会加载类，修饰对象或者方法还是会加载类")]),n._v(" "),s("p",[n._v("final 修饰对象(引用)只是保证引用的指向不变，但不能保证对象本身不变")]),n._v(" "),s("p",[n._v("枚举对象名通常使用全部大写，与常量的命名规范一样")]),n._v(" "),s("p",[n._v("枚举对象根据需要，也可以有多个属性")]),n._v(" "),s("h2",{attrs:{id:"二-自定义类实现枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-自定义类实现枚举"}},[n._v("#")]),n._v(" 二.自定义类实现枚举")]),n._v(" "),s("p",[s("strong",[n._v("将构造器私有化")]),n._v("，目的是防止被new出对象     （私有化，在类外不能创建对象）")]),n._v(" "),s("p",[s("strong",[n._v("去掉 setXxxx() 方法")]),n._v("，防止属性被修改")]),n._v(" "),s("p",[n._v("在Season内部，直接创建"),s("strong",[n._v("固定对象")])]),n._v(" "),s("p",[n._v("对外暴露对象(通过为对象添加 "),s("strong",[n._v("public static final")]),n._v(" 修饰符)")]),n._v(" "),s("p",[n._v("基本数据类型：")]),n._v(" "),s("p",[n._v("引用数据类型： 数组，集合，自定义类，接口，枚举   （创建枚举类型，不要条件反射加@Data）")]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('public class Demo03 {\n    public static void main(String[] args) {\n        System.out.println(Season.AUTUMN);\n        System.out.println(Season.SUMMER);\n    }\n}\nclass Season{\n    private String name;\n    private String desc;\n    //定义了四个对象\n    //加final是为了使引用不能被修改\n    public static final Season SPRING = new Season("春天", "温暖");\n    public static final Season WINTER = new Season("冬天", "寒冷");\n    public static final Season SUMMER = new Season("夏天", "炎热");\n    public static final Season AUTUMN = new Season("秋天", "凉爽");\nprivate Season(String name, String desc) {\n    this.name = name;\n    this.desc = desc;\n}\n\npublic String getName() {\n    return name;\n}\npublic String getDesc() {\n    return desc;\n}\n@Override\npublic String toString() {\n    return "Season{" +\n            "name=\'" + name + \'\\\'\' +\n            ", desc=\'" + desc + \'\\\'\' +\n            \'}\';\n}\n')])])]),s("p",[n._v("}")]),n._v(" "),s("h2",{attrs:{id:"三-使用enum关键字实现枚举-常用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-使用enum关键字实现枚举-常用"}},[n._v("#")]),n._v(" 三.使用enum关键字实现枚举    常用！！！")]),n._v(" "),s("p",[n._v("使用 enum 关键字代替 class")]),n._v(" "),s("p",[n._v("常量对象名(实参列表)")]),n._v(" "),s("p",[n._v('public static final Season2 SPRING = new Season2("春天", "温暖");')]),n._v(" "),s("p",[n._v('等价于 SPRING("春天", "温暖");')]),n._v(" "),s("p",[n._v("如果有多个对象，需要使用 ，间隔")]),n._v(" "),s("p",[s("strong",[n._v("如果使用 enum 关键字来实现枚举，要求将定义的常量对象写在最前面")])]),n._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[n._v('public class Demo04 {\n    public static void main(String[] args) {\n        System.out.println(Season2.SPRING);\n        System.out.println(Season2.SUMMER);\n    }\n}\nenum  Season2{\n    SPRING("春天", "温暖"),WINTER("夏天", "炎热"),SUMMER("夏天", "炎热"),AUTUMN("秋天", "凉爽");\nprivate String name;\nprivate String desc;\n\nprivate Season2(String name, String desc) {\n    this.name = name;\n    this.desc = desc;\n}\npublic String getName() {\n    return name;\n}\npublic String getDesc() {\n    return desc;\n}\n@Override\npublic String toString() {\n    return "Season{" +\n            "name=\'" + name + \'\\\'\' +\n            ", desc=\'" + desc + \'\\\'\' +\n            \'}\';\n}\n}\n')])])]),s("h3",{attrs:{id:"使用enum关键字实现枚举的注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用enum关键字实现枚举的注意事项"}},[n._v("#")]),n._v(" "),s("strong",[n._v("使用enum关键字实现枚举的注意事项")])]),n._v(" "),s("ul",[s("li",[s("p",[n._v("当我们使用enum关键字开发一个枚举类时，默认会继承Enum类；而且该枚举类是一个final类")])]),n._v(" "),s("li",[s("p",[n._v("如果使用无参构造器创建枚举对象，则可以省略小括号")])]),n._v(" "),s("li",[s("p",[n._v("当有多个枚举对象时，"),s("strong",[n._v("使用 ，隔开")]),n._v("，最后以一个分号结尾")])]),n._v(" "),s("li",[s("p",[n._v("枚举对象必须放在枚举类的行首")])])]),n._v(" "),s("h3",{attrs:{id:"enum的常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enum的常用方法"}},[n._v("#")]),n._v(" enum的常用方法")]),n._v(" "),s("p",[n._v("使用关键字enum时，会隐式继承Enum类，这样就可以使用Enum类的相关方法")]),n._v(" "),s("p",[n._v("toString()：Enum类已经重写过了，返回的是当前对象名；子类可以重写该方法，用于返回对象的属性信息")]),n._v(" "),s("p",[n._v("name()：返回当前对象名(常量名)，子类中不能重写")]),n._v(" "),s("p",[n._v("ordinal()：返回当前对象的位置号，默认从0开始")]),n._v(" "),s("p",[n._v("values()：返回当前枚举类中所有的常量对象")]),n._v(" "),s("p",[n._v("valueOf()：将字符串转换成已有的枚举对象，要求字符串必须为已有的常量名，否则报异常！")]),n._v(" "),s("p",[n._v("compareTo()：比较两个枚举常量的大小(编号),返回的结果是两个枚举常量的编号相减得到的数")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('public class Demo05 {\n    public static void main(String[] args) {\n        Season2 autumn = Season2.AUTUMN;\n\n        System.out.println(autumn.name());\n     \n        System.out.println(autumn.ordinal());\n     \n        Season2[] values = Season2.values();\n        for (Season2 season : values) {\n            System.out.println(season);\n        }\n     \n        Season2 autumn1 = Season2.valueOf("AUTUMN");\n        System.out.println("season1="+autumn1);\n        System.out.println(autumn == autumn1);\n     \n        System.out.println(Season2.AUTUMN.compareTo(Season2.SUMMER));\n    }\n}\nenum  Season2{\n    SPRING("春天", "温暖"),WINTER("冬天", "寒冷"),SUMMER("夏天", "炎热"),AUTUMN("秋天", "凉爽");\n\n    private String name;\n    private String desc;\n     \n    private Season2(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getDesc() {\n        return desc;\n    }\n    @Override\n    public String toString() {\n        return "Season{" +\n                "name=\'" + name + \'\\\'\' +\n                ", desc=\'" + desc + \'\\\'\' +\n                \'}\';\n    }\n}\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br")])]),s("h3",{attrs:{id:"enum的使用细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enum的使用细节"}},[n._v("#")]),n._v(" enum的使用细节")]),n._v(" "),s("ul",[s("li",[n._v("使用enum关键字创建的枚举类，就不能再继承其它类了，因为使用enum创建的枚举类会隐式的继承Enum类，而Java是单继承机制")]),n._v(" "),s("li",[n._v("枚举类和普通类一样，可以实现接口")])])])}),[],!1,null,null,null);s.default=t.exports}}]);